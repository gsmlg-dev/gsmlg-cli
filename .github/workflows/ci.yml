name: CI

on:
  push:
    branches:
      - main
      - next
      - next-major
      - beta
      - alpha
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://gsmlg:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m
        env:
          GOPRIVATE: github.com/gsmlg-dev/gsmlg-golang

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.25']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://gsmlg:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Download dependencies
        run: go mod download
        env:
          GOPRIVATE: github.com/gsmlg-dev/gsmlg-golang

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        env:
          GOPRIVATE: github.com/gsmlg-dev/gsmlg-golang

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows, freebsd]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://gsmlg:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Build binary
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o gsmlg-cli-${{ matrix.goos }}-${{ matrix.goarch }} .
        env:
          GOPRIVATE: github.com/gsmlg-dev/gsmlg-golang

  staticcheck:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://gsmlg:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...
        env:
          GOPRIVATE: github.com/gsmlg-dev/gsmlg-golang

  vet:
    name: Go Vet
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://gsmlg:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Download dependencies
        run: go mod download
        env:
          GOPRIVATE: github.com/gsmlg-dev/gsmlg-golang

      - name: Run go vet
        run: go vet ./...
        env:
          GOPRIVATE: github.com/gsmlg-dev/gsmlg-golang
